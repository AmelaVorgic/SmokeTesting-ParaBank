import registrationForm from "../page-object-models/registrationForm"
import welcomePage from "../page-object-models/welcomePage"
import faker from 'faker'

describe('Smoke test for registration', () => {

  beforeEach(() => {
    cy.visit('https://parabank.parasoft.com/parabank/register.htm')
  })

  it('Given that user wants to create an account, he can create it with submitting registration form', () => {
    const username = faker.internet.userName()
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername(username)
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    cy.url()
      .should('include', '/register')
    welcomePage.elements.welcomeMessage()
      .should('be.visible')
      .and('contain', 'Your account was created successfully. You are now logged in.')
  })

  it('Given that user wants to create an account, he can create it without submitting phone number in form', () => {
    const username = faker.internet.userName();
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername(username)
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    cy.url()
      .should('include', '/register')
    welcomePage.elements.welcomeMessage()
      .should('be.visible')
      .and('contain', 'Your account was created successfully. You are now logged in.')
  })

  it('Given that user wants to create an account with already taken username, according error displays', () => {
    const username = faker.internet.userName();
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername(username)
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    welcomePage.elements.logoutButton().click()
    cy.visit('https://parabank.parasoft.com/parabank/register.htm')
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername(username)
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.usernameFieldError()

  })

  it('Given that no first name is entered in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername('username')
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.firstNameEmptyFieldError()
      .should('be.visible')
  })

  it('Given that no last name is entered in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputFirstName('Name')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername('username')
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.lastNameEmptyFieldError()
      .should('be.visible')
  })

  it('Given that no address is entered in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername('username')
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.addressEmptyFieldError()
      .should('be.visible')
  })

  it('Given that no city is entered in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername('username')
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.cityEmptyFieldError()
      .should('be.visible')
  })


  it('Given that no state is entered in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername('username')
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.stateEmptyFieldError()
      .should('be.visible')
  })


  it('Given that no zip code is entered in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername('username')
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.zipCodeEmptyFieldError()
      .should('be.visible')
  })

  it('Given that no ssn is entered in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputUsername('username')
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.ssnEmptyFieldError()
      .should('be.visible')
  })


  it('Given that no username is entered in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.usernameFieldError()
      .should('be.visible')
      .and('contain', 'Username is required.')

  })


  it('Given that no password is entered in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername('username')
    registrationForm.confirmPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.passwordEmptyFieldError()
      .should('be.visible')
      .and('contain', 'Password is required.')
  })


  it('Given that password is not repeated in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername('username')
    registrationForm.inputPassword('password')
    registrationForm.submitRegistrationData()
    registrationForm.elements.passwordConfirmationError()
      .should('be.visible')
      .and('contain', 'Password confirmation is required.')
  })

  it('Given that passwords do not match in registration form and form is submitted, according error should be displayed.', () => {
    registrationForm.inputFirstName('Name')
    registrationForm.inputLastName('Lastname')
    registrationForm.inputAddress('Address')
    registrationForm.inputCity('City')
    registrationForm.inputState('State')
    registrationForm.inputZipCode('00000')
    registrationForm.inputPhoneNo('09112345678')
    registrationForm.inputSsn('012343210')
    registrationForm.inputUsername('username')
    registrationForm.inputPassword('password')
    registrationForm.confirmPassword('notpassword')
    registrationForm.submitRegistrationData()
    registrationForm.elements.passwordConfirmationError()
      .should('be.visible')
      .and('contain', 'Passwords did not match.')
  })
})